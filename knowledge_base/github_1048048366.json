{
  "id": "github_1048048366",
  "title": "agentic-drop-zones",
  "description": "",
  "url": "https://github.com/disler/agentic-drop-zones",
  "language": "Python",
  "stars": 161,
  "forks": 53,
  "created_at": "2025-08-31T19:55:16Z",
  "updated_at": "2025-09-25T17:28:22Z",
  "topics": [],
  "readme_content": "# Agentic Drop Zone\n> See what you can do with the Agentic Drop Zone [in this video](https://youtu.be/gyjoXC8lzIw).\n\nAutomated file processing system that monitors directories and triggers agents (Claude Code, Gemini CLI, Codex CLI) when files are dropped.\n\n## Features\n\n- üìù Simple single file script: `sfs_agentic_drop_zone.py`\n- ‚öôÔ∏è Configurable drop zones in `drops.yaml`\n- ü§ñ Agent agnostic implementation: Claude Code, Gemini CLI, Codex CLI (unimplemented)\n- üß© Run multiple agents in parallel\n- üöÄ Run arbitrary agentic workflows: Do 'anything' your agent can do\n\n<img src=\"./images/arch.png\" alt=\"System Architecture Diagram\" style=\"max-width: 800px;\">\n\n## System Architecture\n\n```mermaid\ngraph LR\n    subgraph \"Agentic Drop Zone System\"\n        A[File Dropped] --> B[Watchdog Detects Event]\n        B --> C{Matches Pattern?}\n        C -->|Yes| D[Load Prompt Template]\n        C -->|No| E[Ignore]\n        D --> F[Replace FILE_PATH Variable]\n        F --> G{Select Agent}\n        G -->|claude_code| H[Claude Code<br/>Full tool access<br/>MCP servers]\n        G -->|gemini_cli| I[Gemini CLI<br/>Google AI<br/>]\n        G -->|codex_cli| J[Codex CLI<br/>OpenAI<br/>unimplemented]\n        H --> K[Stream Response]\n        I --> K\n        J --> K\n        K --> L[Display in Console]\n        L --> B\n    end\n```\n\n\n## How It Works\n\n1. **Watch** - Monitors configured directories for file events (create/modify/delete/move)\n2. **Match** - Checks if dropped files match configured patterns (*.txt, *.json, etc.)\n3. **Process** - Executes Claude Code with custom prompts to process the files\n4. **Output** - Rich console display with streaming responses in styled panels\n\n## Quick Start\n\n```bash\n# Install uv (if not already installed)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Setup environment variables (at least Claude Code API key)\nexport ANTHROPIC_API_KEY=\"your-claude-api-key\"\nexport CLAUDE_CODE_PATH=\"path-to-claude-cli\" # default to claude, may need to run which claude to find the path\n\n# Run with uv\nuv run sfs_agentic_drop_zone.py\n\n# Drag and drop (copy to reuse) files from example_input_files folder into the drop zone directories\ncp example_input_files/echo.txt agentic_drop_zone/echo_zone/\n```\n\n## MCP Support\n\n- Claude Code supports MCP servers, run `cp .mcp.json.sample .mcp.json` and edit the file with your API keys\n- Gemini CLI supports MCP servers, run `cp .gemini/settings.json.sample .gemini/settings.json` and edit the file with your API keys\n- Codex CLI does not support MCP servers without modifying root level `~/.codex/config.toml` (untested)\n\n## ‚ö†Ô∏è Dangerous Agent Execution\n\n**IMPORTANT:** Agents are given complete control over your system with dangerous execution capabilities. Agent permissions are as follows:\n\n- Claude Code runs with `bypassPermissions` mode, which allows all tools without prompting\n- Gemini CLI runs with `yolo` flag with the `--sandbox` flag, which auto-approves all actions but prevents moving outside of the sandbox directory\n- Codex CLI (not implemented)\n\n**By using this system, you acknowledge the risks and take full responsibility for any actions performed by the agents.**\n\n## Configuration (drops.yaml)\n\n```yaml\ndrop_zones:\n  - name: \"Image Generation Drop Zone\"\n    file_patterns: [\"*.txt\", \"*.md\"]           # File types to watch\n    reusable_prompt: \".claude/commands/create_image.md\"  # Prompt template\n    zone_dirs: [\"generate_images_zone\"]        # Directories to monitor\n    events: [\"created\"]                        # Trigger on file creation\n    agent: \"claude_code\"                       # Agent type\n    model: \"sonnet\"                           # Claude model\n    mcp_server_file: \".mcp.json\"              # MCP tools config (optional)\n    create_zone_dir_if_not_exists: true       # Auto-create directories\n```\n\n## Agents\n\nThe system supports multiple AI agents with different capabilities:\n\n### Claude Code (Most Capable)\n- \n- **Status**: ‚úÖ Fully implemented\n- **SDK**: Native Python, Typescript, and CLI SDK with streaming support\n- **Output**: Clean, formatted panels with real-time streaming\n- **Models**: `sonnet`, `opus`, `haiku`\n- **MCP Support**: Full MCP tool integration\n- **Best For**: Complex tasks requiring tool use, SOTA performance\n- [Documentation](https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-overview)\n\n### Gemini CLI\n- **Status**: üü° Implemented with subprocess streaming\n- **SDK**: No SDK - uses CLI via subprocess\n- **Output**: Line-by-line streaming in panels (due to CLI limitations)\n- **Models**: `gemini-2.5-pro` (default), `gemini-2.5-flash`\n- **Flags**: `--yolo` (auto-approve), `--sandbox` (sandboxing)\n- **Best For**: Quick tasks, alternative models outside of Anthropic models\n- [Documentation](https://github.com/google-gemini/gemini-cli)\n\n### Codex CLI\n- **Status**: ‚ùå Not yet implemented\n- **SDK**: Would use CLI via subprocess\n- **Output**: TBD\n- **Models**: `gpt-5`\n- **Best For**: Future implementation (Up for a challenge?)\n- [Documentation](https://github.com/openai/codex)\n\n### Configuration Example\nSee `drops.yaml` for agent setup:\n\n```yaml\n- name: \"Claude Zone\"\n  agent: \"claude_code\"\n  model: \"sonnet\"\n  mcp_server_file: \".mcp.json\" # specify this or it won't use MCP tools\n\n- name: \"Gemini Zone\"  \n  agent: \"gemini_cli\"\n  model: \"gemini-2.5-pro\"\n```\n\n## Claude Code SDK Integration\n\nUses `ClaudeSDKClient` with streaming responses:\n\n```python\nasync with ClaudeSDKClient(options=ClaudeCodeOptions(\n    permission_mode=\"bypassPermissions\",\n    model=\"sonnet\",\n    mcp_servers=\".mcp.json\"  # Optional MCP tools\n)) as client:\n    await client.query(prompt)\n    async for message in client.receive_response():\n        # Stream responses in Rich panels\n```\n\n## Agentic Workflows\n\nThe system comes with several pre-configured workflows. Each requires specific setup and environment variables:\n\n### üé® Image Generation Drop Zone\n**Directory:** `generate_images_zone/`  \n**File Types:** `*.txt`, `*.md`  \n**Purpose:** Generate images from text prompts using Replicate AI models\n\n**Requirements:**\n- Environment variable: `REPLICATE_API_TOKEN` (required)\n- MCP server configuration: `.mcp.json` (copy from `.mcp.json.sample`)\n- Claude Code with Replicate MCP tools\n\n**Usage:** Drop a text file containing image prompts. The system will:\n- Read each prompt from the file\n- Generate images using Replicate's models (default: google/nano-banana)\n- Save images with descriptive names and metadata\n- Archive the original prompt file\n- Open the output directory automatically\n\n### üñºÔ∏è Image Edit Drop Zone  \n**Directory:** `edit_images_zone/`  \n**File Types:** `*.txt`, `*.md`, `*.json`  \n**Purpose:** Edit existing images using AI models\n\n**Requirements:**\n- Environment variable: `REPLICATE_API_TOKEN` (required)\n- MCP server configuration: `.mcp.json`\n- Image URLs or paths in the dropped files\n\n**Usage:** Drop files containing image paths/URLs and editing instructions.\n\n### üìä Training Data Generation Zone\n**Directory:** `training_data_zone/`  \n**File Types:** `*.csv`, `*.jsonl` (JSON Lines format)  \n**Purpose:** Analyze data patterns and generate synthetic training data\n\n**Requirements:**\n- No external API keys required\n- Uses Claude Code's built-in analysis capabilities\n\n**Usage:** Drop data files to:\n- Analyze a sample (100 rows) to understand patterns\n- Generate 25 additional rows (configurable)\n- Append new data using efficient bash commands\n- Create extended datasets without loading into memory\n- Preserve all original data unchanged\n\n**Optimization:** Uses bash append operations to handle large files efficiently\n\n### üéôÔ∏è Morning Debrief Zone\n**Directory:** `morning_debrief_zone/`  \n**File Types:** `*.mp3`, `*.wav`, `*.m4a`, `*.flac`, `*.ogg`, `*.aac`, `*.mp4`  \n**Purpose:** Transcribe morning debrief audio recordings and analyze content for engineering ideas and priorities\n\n**Requirements:**\n- OpenAI Whisper installed: `uv tool install openai-whisper`\n- No API keys required (runs locally)\n\n**Usage:** Drop audio files to:\n- Transcribe using Whisper's tiny model (fast, English)\n- Extract top 3 priorities from discussions\n- Identify key engineering ideas\n- Generate novel extensions and leading questions\n- Create structured debrief documents with:\n  - Date and quarter tracking\n  - Formatted transcript with bulleted sentences\n  - Direct commands extracted from transcript\n- Archive original audio files after processing\n\n**Output:** Generates markdown debrief files with comprehensive analysis in `morning_debrief_zone/debrief_output/<date_time>/`\n\n## Improvements\n\n- The `zone_dirs` should be a single directory (`zone_dir`), and this should be passed into each prompt as a prompt variable (## Variables) and used to create the output directory. Right now it's static in the respective prompts.\n- Get Codex CLI working (they don't have support for local .codex/config.toml at the time of writing)\n- Improve `Gemini CLI` streaming output to be more readable and less line by line based. They don't have an SDK, so we're using the CLI.\n\n## Master AI Coding \n\nLearn to code with AI with foundational [Principles of AI Coding](https://agenticengineer.com/principled-ai-coding?y=adrzone)\n\nFollow the [IndyDevDan youtube channel](https://www.youtube.com/@indydevdan) for more Agentic Coding tips and tricks.",
  "source_type": "github_repository",
  "domain": "software_development",
  "keywords": [],
  "retrieval_tags": [
    "github",
    "repository",
    "code",
    "development"
  ]
}