{
  "id": "meta_github_58291809",
  "title": "darkforestGo",
  "description": "DarkForest, the Facebook Go engine.",
  "url": "https://github.com/facebookresearch/darkforestGo",
  "language": "C",
  "stars": 2099,
  "forks": 324,
  "created_at": "2016-05-08T01:43:32Z",
  "updated_at": "2025-08-27T06:32:36Z",
  "topics": [],
  "readme_content": "DarkForest, the Facebook Go engine\n========\n\n**Update[12/11/2017]** DarkForestGo has been incorporated into ELF [platform](https://github.com/facebookresearch/ELF/tree/master/go).\n\n**Update**: The training code is open source now. See below for detailed instructions.\n\nDarkForest is a Go game engine powered by Deep Learning and developed at Facebook AI Research.\n* [It has a stable rank of 5d on the KGS servers](http://www.gokgs.com/graphPage.jsp?user=darkfmcts3)\n* [Pure Policy Network achieves a stable rank of 3d on KGS](http://www.gokgs.com/graphPage.jsp?user=darkfores2)\n* [It received the 3rd place in the KGS Go Tournament](http://www.weddslist.com/kgs/past/119/index.html)\n* [It received the 2nd place in UEC Computer Go Cup](http://jsb.cs.uec.ac.jp/~igo/eng/result2.html)\n\nWe hope that releasing the source code and pre-trained [models](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0) are beneficial to the community.\n\nDetails of the engine are given in our [paper](http://arxiv.org/abs/1511.06410) and [poster](http://yuandong-tian.com/ICLR2016-poster.pdf), and if you use our engine in future research, cite our paper:\n\n```\nBetter Computer Go Player with Neural Network and Long-term Prediction, ICLR 2016\nYuandong Tian, Yan Zhu\n\n@article{tian2015better,\n  title={Better Computer Go Player with Neural Network and Long-term Prediction},\n  author={Tian, Yuandong and Zhu, Yan},\n  journal={arXiv preprint arXiv:1511.06410},\n  year={2015}\n}\n```\n\n![Architecture](../master/figure.png?raw=true)\n\nAlthough DarkForest is standalone and does not depend on external libraries, some portions of the tactics and pattern code were inspired by the Pachi [engine](https://github.com/pasky/pachi).\n\nBuild\n------------\nDependencies:\n\n1. Install [torch7](http://torch.ch/docs/getting-started.html).\n2. [Install CUDA / CuDNN](https://github.com/facebook/fb.resnet.torch/blob/master/INSTALL.md)\n2. Install a few packages\n```bash\nluarocks install class\nluarocks install image\nluarocks install tds\nluarocks install cudnn\n```\n This program supports 1 to 4 GPUs.\n\nThen just compile with the following command:\n\n```bash\nsh ./compile.sh\n```\n\nGCC 4.8+ is required. Depending on the location of your C++ compiler, please change the script accordingly.\nTested in CentOS 6.5 and Ubuntu 14.04, 15.04.\n\n\nInstall gcc-4.9 as a second compiler and create symlink as:\n\n    sudo ln -s /usr/bin/gcc-4.9 /usr/local/cuda/bin/gcc\n    sudo ln -s /usr/bin/g++-4.9 /usr/local/cuda/bin/g++\nDuring the installation of torch and cudnn, either change the build script or replace symlink at /usr/bin/cc with:\n\n    sudo ln -s /usr/bin/gcc-4.9 /usr/bin/cc\n\nMore info at (http://stackoverflow.com/questions/6622454/cuda-incompatible-with-my-gcc-version)\n\n\nAfter the compilation `cc` symlink can be reverted back to latest version.\n\nIf you get errors like:\n\n    These bindings are for version 5005 or above ...\n\nDownload latest cuDNN from nvidia at (https://developer.nvidia.com/rdp/cudnn-download), registration required.\n\n\n\nUsage\n------------\nStep 1: Download the models.\n\nCreate `./models` directory and download trained [models](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0).\n\nStep 2: First run the GPU server\n\n```bash\ncd ./local_evaluator\nsh cnn_evaluator.sh [num_gpu] [pipe file path]\n```\n\n* `num_gpu`         the number of GPUs (1-8) you have for the current machine.\n* `pipe file path`  The path that the pipe file is settled. Default is `/data/local/go`. If you have specific other path, then you need to specify the same when running `cnnPlayerMCTSV2.lua`\n\nExample: `sh cnn_evaluator.sh 4 /data/local/go`\n\nStep 3: Run the main program\n\n```bash\ncd ./cnnPlayerV2\nth cnnPlayerMCTSV2.lua [options]\n```\n\nSee `cnnPlayerV2/cnnPlayerMCTSV2.lua` for a lot of options. For a simple first run (assuming you have 4 GPUs), you could use:\n\n```bash\nth cnnPlayerMCTSV2.lua --num_gpu [num_gpu] --time_limit 10\n```\nor (if you want to use a set of plausibly good parameters):\n\n```bash\nth cnnPlayerMCTSV2.lua --use_formal_params --num_gpu [num_gpu] --time_limit 10\n```\n\nTo load an existing game up to move 23:\n```bash\nth cnnPlayerMCTSV2.lua [other_options] --setup_board \"/path/to/sgf 23\"\n```\n\nWhen you are in the interactive environment, type\n\n* `clear_board` to clear the board\n* `genmove b`    to genmove the black move.\n* `play w Q4`    to play a move at Q4 for specific color.\n* `quit`         to quit.\n\nA complete game may look like:\n\n```bash\nclear_board\n[MCTS initialization ...]\nplace_free_handicap 3\ngenmove b\n[MCTS generates moves..e.g., it returns Q16]\nplay w D4\ngenmove b\n[MCTS generates moves...]\nquit\n```\n\nFor more commands, please use command `list_commands`, check the details of [GTP protocol](http://senseis.xmp.net/?GTP) or take a look at the source code.\n\nTraining\n--------------\nTo train the policy network from scratch, please run `./train.sh`. 1 GPU is needed. Please install\n`torchnet` first (e.g., `luarocks install torchnet`).\n\nDifferences with the award-winning versions\n--------------\nThe difference between this open source version (A) and that in KGS/competitions (B) is the following:\n* (A) runs on a single machine and uses pipe as client/server communications. (B) uses thrift RPC services as a way to communicate.\n* (B) uses more computational resources.\n* We might have tuned parameters for (B) extensively, but not for (A). We will give the tip of parameter tuning soon.\n\nTroubleshooting\n----------------\n**Q**: My program hanged on genmove/quit, what happened?\n**A**: Make sure you run the GPU server under ./local\\_evaluator, the server remains active and the pipe file path matches between the server and the client.\n\nIf you have any questions or find any bugs, please **open a Github issue** by clicking *\"Issues\"* tab and then click *\"New Issue\"*.\n\nCode Overview\n-------------\n\nThe system consists of the following parts.\n\n* `./CNNPlayerV2`\nLua (terminal) interface for Go.\n\n1. `CNNPlayerV3.lua`              Run Pure-DCNN player\n2. `CNNPlayerMCTSV2.lua`          Run player with DCNN + MCTS\n\n* `./board`\nThings about board and its evaluations. Board data structure and different playout policy.\n\n* `./mctsv2`\nImplementation of Monte Carlo Tree Search\n\n* `./local_evaluator`\nSimple GPU-based server. Communication with search threads via pipe.\n\n* `./utils`\nSimple utilities, e.g., read/write sgf files.\n\n* `./test`\nTest utilities.\n\n* `./train`\nTraining code\n\n* `./dataset`\nDataset used for training. Please download them [here](https://www.dropbox.com/sh/ihzvzajywmfvbhm/AACIgYxew4daP1LXY_HCKwNla?dl=0) and save to the `./dataset` directory.\n\n* `./models`\nAll pre-trained models. Please download them [here](https://www.dropbox.com/sh/6nm8g8z163omb9f/AABQxJyV7EIdbHKd9rnPQGnha?dl=0) and save to the `./models` directory.\n\n* `./sgfs`\nSome exemplar sgf files.\n\nLicense\n----------\nPlease check the LICENSE file for the license of Facebook DarkForest Go engine.\n\n",
  "source_type": "meta_github_repository",
  "domain": "meta_ai",
  "keywords": [
    "facebook"
  ],
  "retrieval_tags": [
    "meta",
    "ai",
    "github",
    "repository",
    "research"
  ]
}