{
  "id": "youtube_tcZ3W8QYirQ",
  "title": "GPT-5 Agentic Coding with Claude Code",
  "description": "Did GPT-5 prove there's a wall? I don't care at all and neither should you.\nThere are more important things to focus on like agentic coding, gpt-5, gpt-oss, opus 4.1, and COMPOSABLE compute.\n\nGPT-5 and Opus 4.1 just dropped with GPT-OSS models running on-device - but which one actually DOMINATES agentic coding? ü§Ø\n\nThese aren't your typical benchmark regurgitations - we're testing real agentic workflows with CONCRETE engineering tasks.\n\nüé• VIDEO REFERENCES:\n- Nano Agent MCP Server: https://github.com/disler/nano-agent\n- PRINCIPLED AI CODING: https://agenticengineer.com/principled-ai-coding?y=tcZ3W8QYirQ\n- OPENAI AGENTS PYTHON: https://openai.github.io/openai-agents-python/\n- GPT-5 POST: https://openai.com/index/introducing-gpt-5/\n- CLAUDE OPUS 4.1 POST: https://www.anthropic.com/news/claude-opus-4-1\n- CURSOR CLI: https://cursor.com/cli\n\nüî• We're beyond single prompts now - it's ALL about agent architecture! Watch as we put GPT-5, Opus 4.1, and the groundbreaking GPT-OSS models (20B and 120B running ON MY DEVICE) through fundamental agentic coding tests using our custom Nano Agent MCP server.\n\nThis isn't just another model comparison - we're evaluating the three things that actually matter: performance, speed, and cost. Using Claude Code as our LLM-as-a-judge aka Agent-as-a-judge, we create a completely fair playing field where every model gets the same context, tools, and prompts.\n\n‚ö° Key Insights discoveries in this video:\n- GPT-OSS models performing legitimate agentic coding LOCALLY on an M4 Max MacBook Pro\n- Why GPT-5 Mini and Nano are crushing expectations in real-world scenarios  \n- How Opus 4.1 performs when cost and speed ACTUALLY matter\n- The game-changing potential of on-device AI agents for coding tasks\n- Legit comparison between GPT-5 and Opus 4.1 (Opus still leads but gpt-5 is priced HYPER COMPETITIVELY)\n\nüõ†Ô∏è We dive deep into fundamental agentic coding patterns using our Nano Agent architecture - a micro-agent system that levels the playing field. From simple file operations to complex multi-step engineering tasks, these models battle it out in REAL agentic workflows.\n\nThe future is clear: it's not about individual models anymore. It's about understanding when and how to trade off performance, speed, and cost based on your specific engineering needs. Whether you're using Claude Code, building AI coding assistants, or developing your own AI agents, mastering these trade-offs is CRITICAL.\n\nüöÄ This video reveals why having more compute options than ever means you need to understand agentic model capabilities at a fundamental level. Don't get left behind in the AI coding revolution - learn how to harness the RIGHT model for the RIGHT task.\n\nThe prompt is no longer the fundamental unit - it's the agentic workflow that matters. Welcome to the future of composable compute and agentic engineering! \n\nNo matter what...\nStay focused and keep building! üí™\n\nüìñ Chapters\n00:00 New Agentic Models\n01:55 Fundamental Agentic Coding\n06:12 Nano Agent for GPT-5 and GPT-OSS\n19:13 Composable Compute\n23:55 Nano Agent MCP Server\n33:40 More Compute than Ever\n\n#gpt5 #aiagents #aicoding",
  "url": "https://www.youtube.com/watch?v=tcZ3W8QYirQ",
  "upload_date": "20250811",
  "duration": 2274,
  "view_count": 44199,
  "transcript": "",
  "source_type": "youtube_video",
  "domain": "educational_content",
  "keywords": [
    "python",
    "ai",
    "coding",
    "git",
    "github"
  ],
  "retrieval_tags": [
    "youtube",
    "video",
    "tutorial",
    "education"
  ],
  "content_hash": "43387f0bb1ea63f0495e78d2677a18d1"
}