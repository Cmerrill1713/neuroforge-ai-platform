{
  "id": "llm_training_doc_-7449258258276312647",
  "title": "Fine-tuning",
  "url": "https://huggingface.co/docs/transformers/training",
  "content": "Transformers documentation Fine-tuning Transformers üè° View all docsAWS Trainium & InferentiaAccelerateArgillaAutoTrainBitsandbytesChat UIDataset viewerDatasetsDeploying on AWSDiffusersDistilabelEvaluateGradioHubHub Python LibraryHuggingface.jsInference Endpoints (dedicated)Inference ProvidersKernelsLeRobotLeaderboardsLightevalMicrosoft AzureOptimumPEFTSafetensorsSentence TransformersTRLTasksText Embeddings InferenceText Generation InferenceTokenizersTrackioTransformersTransformers.jssmolagentstimm Search documentation mainv4.56.2v4.55.4v4.53.3v4.52.3v4.51.3v4.50.0v4.49.0v4.48.2v4.47.1v4.46.3v4.45.2v4.44.2v4.43.4v4.42.4v4.41.2v4.40.2v4.39.3v4.38.2v4.37.2v4.36.1v4.35.2v4.34.1v4.33.3v4.32.1v4.31.0v4.30.0v4.29.1v4.28.1v4.27.2v4.26.1v4.25.1v4.24.0v4.23.1v4.22.2v4.21.3v4.20.1v4.19.4v4.18.0v4.17.0v4.16.2v4.15.0v4.14.1v4.13.0v4.12.5v4.11.3v4.10.1v4.9.2v4.8.2v4.7.0v4.6.0v4.5.1v4.4.2v4.3.3v4.2.2v4.1.1v4.0.1v3.5.1v3.4.0v3.3.1v3.2.0v3.1.0v3.0.2v2.11.0v2.10.0v2.9.1v2.8.0v2.7.0v2.6.0v2.5.1v2.4.1v2.3.0v2.2.2v2.1.1v2.0.0v1.2.0v1.1.0v1.0.0doc-builder-html ARDEENESFRHIITJAKOPTTETRZH Get started Transformers Installation Quickstart Base classes Inference Training Trainer API Trainer Fine-tuning Optimizers Hyperparameter search Distributed training Hardware PEFT Model training anatomy Quantization Export to production Resources Contribute API Join the Hugging Face community and get access to the augmented documentation experience Collaborate on models, datasets and Spaces Faster examples with accelerated inference Switch between documentation themes Sign Up to get started Fine-tuning Fine-tuning adapts a pretrained model to a specific task with a smaller specialized dataset. This approach requires far less data and compute compared to training a model from scratch, which makes it a more accessible option for many users. Transformers provides the Trainer API, which offers a comprehensive set of training features, for fine-tuning any of the models on the Hub. Learn how to fine-tune models for other tasks in our Task Recipes section in Resources! This guide will show you how to fine-tune a model with Trainer to classify Yelp reviews. Log in to your Hugging Face account with your user token to ensure you can access gated models and share your models on the Hub. Copied from huggingface_hub import login login() Start by loading the Yelp Reviews dataset and preprocess (tokenize, pad, and truncate) it for training. Use map to preprocess the entire dataset in one step. Copied from datasets import load_dataset from transformers import AutoTokenizer dataset = load_dataset(\"yelp_review_full\") tokenizer = AutoTokenizer.from_pretrained(\"google-bert/bert-base-cased\") def tokenize(examples): return tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True) dataset = dataset.map(tokenize, batched=True) Fine-tune on a smaller subset of the full dataset to reduce the time it takes. The results won‚Äôt be as good compared to fine-tuning on the full dataset, but it is useful to make sure everything works as expected first before committing to training on the full dataset. Copied small_train = dataset[\"train\"].shuffle(seed=42).select(range(1000)) small_eval = dataset[\"test\"].shuffle(seed=42).select(range(1000)) Trainer Trainer is an optimized training loop for Transformers models, making it easy to start training right away without manually writing your own training code. Pick and choose from a wide range of training features in TrainingArguments such as gradient accumulation, mixed precision, and options for reporting and logging training metrics. Load a model and provide the number of expected labels (you can find this information on the Yelp Review dataset card). Copied from transformers import AutoModelForSequenceClassification model = AutoModelForSequenceClassification.from_pretrained(\"google-bert/bert-base-cased\", num_labels=5) \"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at google-bert/bert-base-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\" \"You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\" The message above is a reminder that the models pretrained head is discarded and replaced with a randomly initialized classification head. The randomly initialized head needs to be fine-tuned on your specific task to output meaningful predictions. With the model loaded, set up your training hyperparameters in TrainingArguments. Hyperparameters are variables that control the training process - such as the learning rate, batch size, number of epochs - which in turn impacts model performance. Selecting the correct hyperparameters is important and you should experiment with them to find the best configuration for your task. For this guide, you can use the default hyperparameters which provide a good baseline to begin with. The only settings to configure in this guide are where to save the checkpoint, how to evaluate model performance during training, and pushing the model to the Hub. Trainer requires a function to compute and report your metric. For a classification task, you‚Äôll use evaluate.load to load the accuracy function from the Evaluate library. Gather the predictions and labels in compute to calculate the accuracy. Copied import numpy as np import evaluate metric = evaluate.load(\"accuracy\") def compute_metrics(eval_pred): logits, labels = eval_pred # convert the logits to their predicted class predictions = np.argmax(logits, axis=-1) return metric.compute(predictions=predictions, references=labels) Set up TrainingArguments with where to save the model and when to compute accuracy during training. The example below sets it to \"epoch\", which reports the accuracy at the end of each epoch. Add push_to_hub=True to upload the model to the Hub after training. Copied from transformers import TrainingArguments training_args = TrainingArguments( output_dir=\"yelp_review_classifier\", eval_strategy=\"epoch\", push_to_hub=True, ) Create a Trainer instance and pass it the model, training arguments, training and test datasets, and evaluation function. Call train() to start training. Copied trainer = Trainer( model=model, args=training_args, train_dataset=dataset[\"train\"], eval_dataset=dataset[\"test\"], compute_metrics=compute_metrics, ) trainer.train() Finally, use push_to_hub() to upload your model and tokenizer to the Hub. Copied trainer.push_to_hub() Resources Refer to the Transformers examples for more detailed training scripts on various tasks. You can also check out the notebooks for interactive examples. < > Update on GitHub ‚ÜêTrainer Optimizers‚Üí Fine-tuning Trainer Resources",
  "source_type": "training_documentation",
  "domain": "llm_training",
  "keywords": [
    "training",
    "fine-tuning",
    "guide",
    "example",
    "transformers",
    "huggingface",
    "dataset",
    "model"
  ],
  "retrieval_tags": [
    "llm",
    "training",
    "documentation",
    "tutorial",
    "guide"
  ]
}