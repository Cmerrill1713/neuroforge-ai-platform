{
  "id": "github_1019046491",
  "title": "claude-code-hooks-multi-agent-observability",
  "description": "Real-time monitoring for Claude Code agents through simple hook event tracking.",
  "url": "https://github.com/disler/claude-code-hooks-multi-agent-observability",
  "language": "Python",
  "stars": 486,
  "forks": 129,
  "created_at": "2025-07-13T16:11:17Z",
  "updated_at": "2025-09-28T11:34:54Z",
  "topics": [],
  "readme_content": "# Multi-Agent Observability System\n\nReal-time monitoring and visualization for Claude Code agents through comprehensive hook event tracking. You can watch the [full breakdown here](https://youtu.be/9ijnN985O_c).\n\n## üéØ Overview\n\nThis system provides complete observability into Claude Code agent behavior by capturing, storing, and visualizing Claude Code [Hook events](https://docs.anthropic.com/en/docs/claude-code/hooks) in real-time. It enables monitoring of multiple concurrent agents with session tracking, event filtering, and live updates. \n\n<img src=\"images/app.png\" alt=\"Multi-Agent Observability Dashboard\" style=\"max-width: 800px; width: 100%;\">\n\n## üèóÔ∏è Architecture\n\n```\nClaude Agents ‚Üí Hook Scripts ‚Üí HTTP POST ‚Üí Bun Server ‚Üí SQLite ‚Üí WebSocket ‚Üí Vue Client\n```\n\n![Agent Data Flow Animation](images/AgentDataFlowV2.gif)\n\n## üìã Setup Requirements\n\nBefore getting started, ensure you have the following installed:\n\n- **[Claude Code](https://docs.anthropic.com/en/docs/claude-code)** - Anthropic's official CLI for Claude\n- **[Astral uv](https://docs.astral.sh/uv/)** - Fast Python package manager (required for hook scripts)\n- **[Bun](https://bun.sh/)**, **npm**, or **yarn** - For running the server and client\n- **Anthropic API Key** - Set as `ANTHROPIC_API_KEY` environment variable\n- **OpenAI API Key** (optional) - For multi-model support with just-prompt MCP tool\n- **ElevenLabs API Key** (optional) - For audio features\n\n### Configure .claude Directory\n\nTo setup observability in your repo,we need to copy the .claude directory to your project root.\n\nTo integrate the observability hooks into your projects:\n\n1. **Copy the entire `.claude` directory to your project root:**\n   ```bash\n   cp -R .claude /path/to/your/project/\n   ```\n\n2. **Update the `settings.json` configuration:**\n   \n   Open `.claude/settings.json` in your project and modify the `source-app` parameter to identify your project:\n   \n   ```json\n   {\n     \"hooks\": {\n       \"PreToolUse\": [{\n         \"matcher\": \"\",\n         \"hooks\": [\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/pre_tool_use.py\"\n           },\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/send_event.py --source-app YOUR_PROJECT_NAME --event-type PreToolUse --summarize\"\n           }\n         ]\n       }],\n       \"PostToolUse\": [{\n         \"matcher\": \"\",\n         \"hooks\": [\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/post_tool_use.py\"\n           },\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/send_event.py --source-app YOUR_PROJECT_NAME --event-type PostToolUse --summarize\"\n           }\n         ]\n       }],\n       \"UserPromptSubmit\": [{\n         \"hooks\": [\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/user_prompt_submit.py --log-only\"\n           },\n           {\n             \"type\": \"command\",\n             \"command\": \"uv run .claude/hooks/send_event.py --source-app YOUR_PROJECT_NAME --event-type UserPromptSubmit --summarize\"\n           }\n         ]\n       }]\n       // ... (similar patterns for Notification, Stop, SubagentStop, PreCompact)\n     }\n   }\n   ```\n   \n   Replace `YOUR_PROJECT_NAME` with a unique identifier for your project (e.g., `my-api-server`, `react-app`, etc.).\n\n3. **Ensure the observability server is running:**\n   ```bash\n   # From the observability project directory (this codebase)\n   ./scripts/start-system.sh\n   ```\n\nNow your project will send events to the observability system whenever Claude Code performs actions.\n\n## üöÄ Quick Start\n\nYou can quickly view how this works by running this repositories .claude setup.\n\n```bash\n# 1. Start both server and client\n./scripts/start-system.sh\n\n# 2. Open http://localhost:5173 in your browser\n\n# 3. Open Claude Code and run the following command:\nRun git ls-files to understand the codebase.\n\n# 4. Watch events stream in the client\n\n# 5. Copy the .claude folder to other projects you want to emit events from.\ncp -R .claude <directory of your codebase you want to emit events from>\n```\n\n## üìÅ Project Structure\n\n```\nclaude-code-hooks-multi-agent-observability/\n‚îÇ\n‚îú‚îÄ‚îÄ apps/                    # Application components\n‚îÇ   ‚îú‚îÄ‚îÄ server/             # Bun TypeScript server\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts    # Main server with HTTP/WebSocket endpoints\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ db.ts       # SQLite database management & migrations\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts    # TypeScript interfaces\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ package.json\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ events.db       # SQLite database (gitignored)\n‚îÇ   ‚îÇ\n‚îÇ   ‚îî‚îÄ‚îÄ client/             # Vue 3 TypeScript client\n‚îÇ       ‚îú‚îÄ‚îÄ src/\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ App.vue     # Main app with theme & WebSocket management\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ components/\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EventTimeline.vue      # Event list with auto-scroll\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EventRow.vue           # Individual event display\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FilterPanel.vue        # Multi-select filters\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChatTranscriptModal.vue # Chat history viewer\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StickScrollButton.vue  # Scroll control\n‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LivePulseChart.vue     # Real-time activity chart\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ composables/\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useWebSocket.ts        # WebSocket connection logic\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useEventColors.ts      # Color assignment system\n‚îÇ       ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useChartData.ts        # Chart data aggregation\n‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useEventEmojis.ts      # Event type emoji mapping\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ utils/\n‚îÇ       ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ chartRenderer.ts       # Canvas chart rendering\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ types.ts    # TypeScript interfaces\n‚îÇ       ‚îú‚îÄ‚îÄ .env.sample     # Environment configuration template\n‚îÇ       ‚îî‚îÄ‚îÄ package.json\n‚îÇ\n‚îú‚îÄ‚îÄ .claude/                # Claude Code integration\n‚îÇ   ‚îú‚îÄ‚îÄ hooks/             # Hook scripts (Python with uv)\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ send_event.py  # Universal event sender\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pre_tool_use.py    # Tool validation & blocking\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ post_tool_use.py   # Result logging\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification.py    # User interaction events\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user_prompt_submit.py # User prompt logging & validation\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stop.py           # Session completion\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subagent_stop.py  # Subagent completion\n‚îÇ   ‚îÇ\n‚îÇ   ‚îî‚îÄ‚îÄ settings.json      # Hook configuration\n‚îÇ\n‚îú‚îÄ‚îÄ scripts/               # Utility scripts\n‚îÇ   ‚îú‚îÄ‚îÄ start-system.sh   # Launch server & client\n‚îÇ   ‚îú‚îÄ‚îÄ reset-system.sh   # Stop all processes\n‚îÇ   ‚îî‚îÄ‚îÄ test-system.sh    # System validation\n‚îÇ\n‚îî‚îÄ‚îÄ logs/                 # Application logs (gitignored)\n```\n\n## üîß Component Details\n\n### 1. Hook System (`.claude/hooks/`)\n\n> If you want to master claude code hooks watch [this video](https://github.com/disler/claude-code-hooks-mastery)\n\nThe hook system intercepts Claude Code lifecycle events:\n\n- **`send_event.py`**: Core script that sends event data to the observability server\n  - Supports `--add-chat` flag for including conversation history\n  - Validates server connectivity before sending\n  - Handles all event types with proper error handling\n\n- **Event-specific hooks**: Each implements validation and data extraction\n  - `pre_tool_use.py`: Blocks dangerous commands, validates tool usage\n  - `post_tool_use.py`: Captures execution results and outputs\n  - `notification.py`: Tracks user interaction points\n  - `user_prompt_submit.py`: Logs user prompts, supports validation (v1.0.54+)\n  - `stop.py`: Records session completion with optional chat history\n  - `subagent_stop.py`: Monitors subagent task completion\n\n### 2. Server (`apps/server/`)\n\nBun-powered TypeScript server with real-time capabilities:\n\n- **Database**: SQLite with WAL mode for concurrent access\n- **Endpoints**:\n  - `POST /events` - Receive events from agents\n  - `GET /events/recent` - Paginated event retrieval with filtering\n  - `GET /events/filter-options` - Available filter values\n  - `WS /stream` - Real-time event broadcasting\n- **Features**:\n  - Automatic schema migrations\n  - Event validation\n  - WebSocket broadcast to all clients\n  - Chat transcript storage\n\n### 3. Client (`apps/client/`)\n\nVue 3 application with real-time visualization:\n\n- **Visual Design**:\n  - Dual-color system: App colors (left border) + Session colors (second border)\n  - Gradient indicators for visual distinction\n  - Dark/light theme support\n  - Responsive layout with smooth animations\n\n- **Features**:\n  - Real-time WebSocket updates\n  - Multi-criteria filtering (app, session, event type)\n  - Live pulse chart with session-colored bars and event type indicators\n  - Time range selection (1m, 3m, 5m) with appropriate data aggregation\n  - Chat transcript viewer with syntax highlighting\n  - Auto-scroll with manual override\n  - Event limiting (configurable via `VITE_MAX_EVENTS_TO_DISPLAY`)\n\n- **Live Pulse Chart**:\n  - Canvas-based real-time visualization\n  - Session-specific colors for each bar\n  - Event type emojis displayed on bars\n  - Smooth animations and glow effects\n  - Responsive to filter changes\n\n## üîÑ Data Flow\n\n1. **Event Generation**: Claude Code executes an action (tool use, notification, etc.)\n2. **Hook Activation**: Corresponding hook script runs based on `settings.json` configuration\n3. **Data Collection**: Hook script gathers context (tool name, inputs, outputs, session ID)\n4. **Transmission**: `send_event.py` sends JSON payload to server via HTTP POST\n5. **Server Processing**:\n   - Validates event structure\n   - Stores in SQLite with timestamp\n   - Broadcasts to WebSocket clients\n6. **Client Update**: Vue app receives event and updates timeline in real-time\n\n## üé® Event Types & Visualization\n\n| Event Type   | Emoji | Purpose               | Color Coding  | Special Display |\n| ------------ | ----- | --------------------- | ------------- | --------------- |\n| PreToolUse   | üîß     | Before tool execution | Session-based | Tool name & details |\n| PostToolUse  | ‚úÖ     | After tool completion | Session-based | Tool name & results |\n| Notification | üîî     | User interactions     | Session-based | Notification message |\n| Stop         | üõë     | Response completion   | Session-based | Summary & chat transcript |\n| SubagentStop | üë•     | Subagent finished     | Session-based | Subagent details |\n| PreCompact   | üì¶     | Context compaction    | Session-based | Compaction details |\n| UserPromptSubmit | üí¨ | User prompt submission | Session-based | Prompt: _\"user message\"_ (italic) |\n\n### UserPromptSubmit Event (v1.0.54+)\n\nThe `UserPromptSubmit` hook captures every user prompt before Claude processes it. In the UI:\n- Displays as `Prompt: \"user's message\"` in italic text\n- Shows the actual prompt content inline (truncated to 100 chars)\n- Summary appears on the right side when AI summarization is enabled\n- Useful for tracking user intentions and conversation flow\n\n## üîå Integration\n\n### For New Projects\n\n1. Copy the event sender:\n   ```bash\n   cp .claude/hooks/send_event.py YOUR_PROJECT/.claude/hooks/\n   ```\n\n2. Add to your `.claude/settings.json`:\n   ```json\n   {\n     \"hooks\": {\n       \"PreToolUse\": [{\n         \"matcher\": \".*\",\n         \"hooks\": [{\n           \"type\": \"command\",\n           \"command\": \"uv run .claude/hooks/send_event.py --source-app YOUR_APP --event-type PreToolUse\"\n         }]\n       }]\n     }\n   }\n   ```\n\n### For This Project\n\nAlready integrated! Hooks run both validation and observability:\n```json\n{\n  \"type\": \"command\",\n  \"command\": \"uv run .claude/hooks/pre_tool_use.py\"\n},\n{\n  \"type\": \"command\", \n  \"command\": \"uv run .claude/hooks/send_event.py --source-app cc-hooks-observability --event-type PreToolUse\"\n}\n```\n\n## üß™ Testing\n\n```bash\n# System validation\n./scripts/test-system.sh\n\n# Manual event test\ncurl -X POST http://localhost:4000/events \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"source_app\": \"test\",\n    \"session_id\": \"test-123\",\n    \"hook_event_type\": \"PreToolUse\",\n    \"payload\": {\"tool_name\": \"Bash\", \"tool_input\": {\"command\": \"ls\"}}\n  }'\n```\n\n## ‚öôÔ∏è Configuration\n\n### Environment Variables\n\nCopy `.env.sample` to `.env` in the project root and fill in your API keys:\n\n**Application Root** (`.env` file):\n- `ANTHROPIC_API_KEY` ‚Äì Anthropic Claude API key (required)\n- `ENGINEER_NAME` ‚Äì Your name (for logging/identification)\n- `GEMINI_API_KEY` ‚Äì Google Gemini API key (optional)\n- `OPENAI_API_KEY` ‚Äì OpenAI API key (optional)\n- `ELEVEN_API_KEY` ‚Äì ElevenLabs API key (optional)\n\n**Client** (`.env` file in `apps/client/.env`):\n- `VITE_MAX_EVENTS_TO_DISPLAY=100` ‚Äì Maximum events to show (removes oldest when exceeded)\n\n### Server Ports\n\n- Server: `4000` (HTTP/WebSocket)\n- Client: `5173` (Vite dev server)\n\n## üõ°Ô∏è Security Features\n\n- Blocks dangerous commands (`rm -rf`, etc.)\n- Prevents access to sensitive files (`.env`, private keys)\n- Validates all inputs before execution\n- No external dependencies for core functionality\n\n## üìä Technical Stack\n\n- **Server**: Bun, TypeScript, SQLite\n- **Client**: Vue 3, TypeScript, Vite, Tailwind CSS\n- **Hooks**: Python 3.8+, Astral uv, TTS (ElevenLabs or OpenAI), LLMs (Claude or OpenAI)\n- **Communication**: HTTP REST, WebSocket\n\n## üîß Troubleshooting\n\n### Hook Scripts Not Working\n\nIf your hook scripts aren't executing properly, it might be due to relative paths in your `.claude/settings.json`. Claude Code documentation recommends using absolute paths for command scripts.\n\n**Solution**: Use the custom Claude Code slash command to automatically convert all relative paths to absolute paths:\n\n```bash\n# In Claude Code, simply run:\n/convert_paths_absolute\n```\n\nThis command will:\n- Find all relative paths in your hook command scripts\n- Convert them to absolute paths based on your current working directory\n- Create a backup of your original settings.json\n- Show you exactly what changes were made\n\nThis ensures your hooks work correctly regardless of where Claude Code is executed from.\n\n## Master AI Coding\n> And prepare for Agentic Engineering\n\nLearn to code with AI with foundational [Principles of AI Coding](https://agenticengineer.com/principled-ai-coding?y=cchookobvs)\n\nFollow the [IndyDevDan youtube channel](https://www.youtube.com/@indydevdan) for more AI coding tips and tricks.",
  "source_type": "github_repository",
  "domain": "software_development",
  "keywords": [],
  "retrieval_tags": [
    "github",
    "repository",
    "code",
    "development"
  ]
}