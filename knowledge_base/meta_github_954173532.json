{
  "id": "meta_github_954173532",
  "title": "llama-api-python",
  "description": "The official Python library for the Llama API",
  "url": "https://github.com/meta-llama/llama-api-python",
  "language": "Python",
  "stars": 43,
  "forks": 12,
  "created_at": "2025-03-24T17:10:39Z",
  "updated_at": "2025-09-28T11:37:12Z",
  "topics": [],
  "readme_content": "# Llama API Client Python API library\n\n<!-- prettier-ignore -->\n[![PyPI version](https://img.shields.io/pypi/v/llama_api_client.svg?label=pypi%20(stable))](https://pypi.org/project/llama_api_client/)\n\nThe Llama API Client Python library provides convenient access to the Llama API Client REST API from any Python 3.8+\napplication. The library includes type definitions for all request params and response fields,\nand offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).\n\nIt is generated with [Stainless](https://www.stainless.com/).\n\n## Documentation\n\nThe REST API documentation can be found on [llama.developer.meta.com](https://llama.developer.meta.com/docs). The full API of this library can be found in [api.md](api.md).\n\n## Installation\n\n```sh\npip install llama-api-client\n```\n\n## Usage\n\nThe full API of this library can be found in [api.md](api.md).\n\n```python\nimport os\nfrom llama_api_client import LlamaAPIClient\n\nclient = LlamaAPIClient(\n    api_key=os.environ.get(\"LLAMA_API_KEY\"),  # This is the default and can be omitted\n)\n\ncreate_chat_completion_response = client.chat.completions.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n)\nprint(create_chat_completion_response.completion_message)\n```\n\nWhile you can provide an `api_key` keyword argument,\nwe recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)\nto add `LLAMA_API_KEY=\"My API Key\"` to your `.env` file\nso that your API Key is not stored in source control.\n\n## Async usage\n\nSimply import `AsyncLlamaAPIClient` instead of `LlamaAPIClient` and use `await` with each API call:\n\n```python\nimport os\nimport asyncio\nfrom llama_api_client import AsyncLlamaAPIClient\n\nclient = AsyncLlamaAPIClient(\n    api_key=os.environ.get(\"LLAMA_API_KEY\"),  # This is the default and can be omitted\n)\n\n\nasync def main() -> None:\n    create_chat_completion_response = await client.chat.completions.create(\n        messages=[\n            {\n                \"content\": \"string\",\n                \"role\": \"user\",\n            }\n        ],\n        model=\"model\",\n    )\n    print(create_chat_completion_response.completion_message)\n\n\nasyncio.run(main())\n```\n\nFunctionality between the synchronous and asynchronous clients is otherwise identical.\n\n### With aiohttp\n\nBy default, the async client uses `httpx` for HTTP requests. However, for improved concurrency performance you may also use `aiohttp` as the HTTP backend.\n\nYou can enable this by installing `aiohttp`:\n\n```sh\n# install from the production repo\npip install 'llama_api_client[aiohttp] @ git+ssh://git@github.com/meta-llama/llama-api-python.git'\n```\n\nThen you can enable it by instantiating the client with `http_client=DefaultAioHttpClient()`:\n\n```python\nimport asyncio\nfrom llama_api_client import DefaultAioHttpClient\nfrom llama_api_client import AsyncLlamaAPIClient\n\n\nasync def main() -> None:\n    async with AsyncLlamaAPIClient(\n        api_key=\"My API Key\",\n        http_client=DefaultAioHttpClient(),\n    ) as client:\n        create_chat_completion_response = await client.chat.completions.create(\n            messages=[\n                {\n                    \"content\": \"string\",\n                    \"role\": \"user\",\n                }\n            ],\n            model=\"model\",\n        )\n        print(create_chat_completion_response.completion_message)\n\n\nasyncio.run(main())\n```\n\n## Streaming responses\n\nWe provide support for streaming responses using Server Side Events (SSE).\n\n```python\nfrom llama_api_client import LlamaAPIClient\n\nclient = LlamaAPIClient()\n\nstream = client.chat.completions.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n    stream=True,\n)\nfor chunk in stream:\n    print(chunk.event.delta.text, end=\"\", flush=True)\n```\n\nThe async client uses the exact same interface.\n\n```python\nfrom llama_api_client import AsyncLlamaAPIClient\n\nclient = AsyncLlamaAPIClient()\n\nstream = await client.chat.completions.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n    stream=True,\n)\nasync for chunk in stream:\n    print(chunk.event.delta.text, end=\"\", flush=True)\n```\n\n## Using types\n\nNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict). Responses are [Pydantic models](https://docs.pydantic.dev) which also provide helper methods for things like:\n\n- Serializing back into JSON, `model.to_json()`\n- Converting to a dictionary, `model.to_dict()`\n\nTyped requests and responses provide autocomplete and documentation within your editor. If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `basic`.\n\n## Handling errors\n\nWhen the library is unable to connect to the API (for example, due to network connection problems or a timeout), a subclass of `llama_api_client.APIConnectionError` is raised.\n\nWhen the API returns a non-success status code (that is, 4xx or 5xx\nresponse), a subclass of `llama_api_client.APIStatusError` is raised, containing `status_code` and `response` properties.\n\nAll errors inherit from `llama_api_client.APIError`.\n\n```python\nimport llama_api_client\nfrom llama_api_client import LlamaAPIClient\n\nclient = LlamaAPIClient()\n\ntry:\n    client.chat.completions.create(\n        messages=[\n            {\n                \"content\": \"string\",\n                \"role\": \"user\",\n            }\n        ],\n        model=\"model\",\n    )\nexcept llama_api_client.APIConnectionError as e:\n    print(\"The server could not be reached\")\n    print(e.__cause__)  # an underlying Exception, likely raised within httpx.\nexcept llama_api_client.RateLimitError as e:\n    print(\"A 429 status code was received; we should back off a bit.\")\nexcept llama_api_client.APIStatusError as e:\n    print(\"Another non-200-range status code was received\")\n    print(e.status_code)\n    print(e.response)\n```\n\nError codes are as follows:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n### Retries\n\nCertain errors are automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,\n429 Rate Limit, and >=500 Internal errors are all retried by default.\n\nYou can use the `max_retries` option to configure or disable retry settings:\n\n```python\nfrom llama_api_client import LlamaAPIClient\n\n# Configure the default for all requests:\nclient = LlamaAPIClient(\n    # default is 2\n    max_retries=0,\n)\n\n# Or, configure per-request:\nclient.with_options(max_retries=5).chat.completions.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n)\n```\n\n### Timeouts\n\nBy default requests time out after 1 minute. You can configure this with a `timeout` option,\nwhich accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/timeouts/#fine-tuning-the-configuration) object:\n\n```python\nfrom llama_api_client import LlamaAPIClient\n\n# Configure the default for all requests:\nclient = LlamaAPIClient(\n    # 20 seconds (default is 1 minute)\n    timeout=20.0,\n)\n\n# More granular control:\nclient = LlamaAPIClient(\n    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),\n)\n\n# Override per-request:\nclient.with_options(timeout=5.0).chat.completions.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n)\n```\n\nOn timeout, an `APITimeoutError` is thrown.\n\nNote that requests that time out are [retried twice by default](#retries).\n\n## Advanced\n\n### Logging\n\nWe use the standard library [`logging`](https://docs.python.org/3/library/logging.html) module.\n\nYou can enable logging by setting the environment variable `LLAMA_API_CLIENT_LOG` to `info`.\n\n```shell\n$ export LLAMA_API_CLIENT_LOG=info\n```\n\nOr to `debug` for more verbose logging.\n\n### How to tell whether `None` means `null` or missing\n\nIn an API response, a field may be explicitly `null`, or missing entirely; in either case, its value is `None` in this library. You can differentiate the two cases with `.model_fields_set`:\n\n```py\nif response.my_field is None:\n  if 'my_field' not in response.model_fields_set:\n    print('Got json like {}, without a \"my_field\" key present at all.')\n  else:\n    print('Got json like {\"my_field\": null}.')\n```\n\n### Accessing raw response data (e.g. headers)\n\nThe \"raw\" Response object can be accessed by prefixing `.with_raw_response.` to any HTTP method call, e.g.,\n\n```py\nfrom llama_api_client import LlamaAPIClient\n\nclient = LlamaAPIClient()\nresponse = client.chat.completions.with_raw_response.create(\n    messages=[{\n        \"content\": \"string\",\n        \"role\": \"user\",\n    }],\n    model=\"model\",\n)\nprint(response.headers.get('X-My-Header'))\n\ncompletion = response.parse()  # get the object that `chat.completions.create()` would have returned\nprint(completion.id)\n```\n\nThese methods return an [`APIResponse`](https://github.com/meta-llama/llama-api-python/tree/main/src/llama_api_client/_response.py) object.\n\nThe async client returns an [`AsyncAPIResponse`](https://github.com/meta-llama/llama-api-python/tree/main/src/llama_api_client/_response.py) with the same structure, the only difference being `await`able methods for reading the response content.\n\n#### `.with_streaming_response`\n\nThe above interface eagerly reads the full response body when you make the request, which may not always be what you want.\n\nTo stream the response body, use `.with_streaming_response` instead, which requires a context manager and only reads the response body once you call `.read()`, `.text()`, `.json()`, `.iter_bytes()`, `.iter_text()`, `.iter_lines()` or `.parse()`. In the async client, these are async methods.\n\n```python\nwith client.chat.completions.with_streaming_response.create(\n    messages=[\n        {\n            \"content\": \"string\",\n            \"role\": \"user\",\n        }\n    ],\n    model=\"model\",\n) as response:\n    print(response.headers.get(\"X-My-Header\"))\n\n    for line in response.iter_lines():\n        print(line)\n```\n\nThe context manager is required so that the response will reliably be closed.\n\n### Making custom/undocumented requests\n\nThis library is typed for convenient access to the documented API.\n\nIf you need to access undocumented endpoints, params, or response properties, the library can still be used.\n\n#### Undocumented endpoints\n\nTo make requests to undocumented endpoints, you can make requests using `client.get`, `client.post`, and other\nhttp verbs. Options on the client will be respected (such as retries) when making this request.\n\n```py\nimport httpx\n\nresponse = client.post(\n    \"/foo\",\n    cast_to=httpx.Response,\n    body={\"my_param\": True},\n)\n\nprint(response.headers.get(\"x-foo\"))\n```\n\n#### Undocumented request params\n\nIf you want to explicitly send an extra param, you can do so with the `extra_query`, `extra_body`, and `extra_headers` request\noptions.\n\n#### Undocumented response properties\n\nTo access undocumented response properties, you can access the extra fields like `response.unknown_prop`. You\ncan also get all the extra fields on the Pydantic model as a dict with\n[`response.model_extra`](https://docs.pydantic.dev/latest/api/base_model/#pydantic.BaseModel.model_extra).\n\n### Configuring the HTTP client\n\nYou can directly override the [httpx client](https://www.python-httpx.org/api/#client) to customize it for your use case, including:\n\n- Support for [proxies](https://www.python-httpx.org/advanced/proxies/)\n- Custom [transports](https://www.python-httpx.org/advanced/transports/)\n- Additional [advanced](https://www.python-httpx.org/advanced/clients/) functionality\n\n```python\nimport httpx\nfrom llama_api_client import LlamaAPIClient, DefaultHttpxClient\n\nclient = LlamaAPIClient(\n    # Or use the `LLAMA_API_CLIENT_BASE_URL` env var\n    base_url=\"http://my.test.server.example.com:8083\",\n    http_client=DefaultHttpxClient(\n        proxy=\"http://my.test.proxy.example.com\",\n        transport=httpx.HTTPTransport(local_address=\"0.0.0.0\"),\n    ),\n)\n```\n\nYou can also customize the client on a per-request basis by using `with_options()`:\n\n```python\nclient.with_options(http_client=DefaultHttpxClient(...))\n```\n\n### Managing HTTP resources\n\nBy default the library closes underlying HTTP connections whenever the client is [garbage collected](https://docs.python.org/3/reference/datamodel.html#object.__del__). You can manually close the client using the `.close()` method if desired, or with a context manager that closes when exiting.\n\n```py\nfrom llama_api_client import LlamaAPIClient\n\nwith LlamaAPIClient() as client:\n  # make requests here\n  ...\n\n# HTTP client is now closed\n```\n\n## Versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals.)_\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/meta-llama/llama-api-python/issues) with questions, bugs, or suggestions.\n\n### Determining the installed version\n\nIf you've upgraded to the latest version but aren't seeing any new features you were expecting then your python environment is likely still using an older version.\n\nYou can determine the version that is being used at runtime with:\n\n```py\nimport llama_api_client\nprint(llama_api_client.__version__)\n```\n\n## Requirements\n\nPython 3.8 or higher.\n\n## Contributing\n\nSee [the contributing documentation](./CONTRIBUTING.md).\n\n## License\nLlama API Python SDK is MIT licensed, as found in the LICENSE file.",
  "source_type": "meta_github_repository",
  "domain": "meta_ai",
  "keywords": [
    "llama"
  ],
  "retrieval_tags": [
    "meta",
    "ai",
    "github",
    "repository",
    "research"
  ]
}