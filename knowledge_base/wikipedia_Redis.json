{
  "id": "wikipedia_Redis",
  "title": "Redis",
  "url": "https://en.wikipedia.org/wiki/Redis",
  "content": "Redis (/ˈrɛdɪs/;[8][9] Remote Dictionary Server)[8] is an in-memory key–value database, used as a distributed cache and message broker, with optional durability.[10] Because it holds all data in memory and because of its design, Redis offers low-latency reads and writes, making it particularly suitable for use cases that require a cache. Redis is the most popular NoSQL database,[11][12][13] and one of the most popular databases overall.[14]\n\nThe project was developed and maintained by Salvatore Sanfilippo, starting in 2009.[15] From 2015 until 2020, he led a project core team sponsored by Redis Ltd.[16] Salvatore Sanfilippo left Redis as the maintainer in 2020.[17] In 2021 Redis Labs dropped the Labs from its name and now is known simply as \"Redis\".[18]\n\nIn 2018, some modules for Redis adopted a modified Apache 2.0 license with a Commons Clause.[19] In 2024, the main Redis code switched from the open-source BSD-3 license to being dual-licensed under the Redis Source Available License v2 and the Server Side Public License v1.[6] On May 1, 2025, Redis became tri-licensed beginning with version 8.0, with the GNU Affero General Public License as the third option.[7]\n\nThe name Redis means Remote Dictionary Server.[8] The Redis project began when Salvatore Sanfilippo, nicknamed antirez, the original developer of Redis, was trying to improve the scalability of his Italian startup, developing a real-time web log analyzer. After encountering significant problems in scaling some types of workloads using traditional database systems, Sanfilippo began in 2009 to prototype a first proof of concept version of Redis in Tcl.[20] Later Sanfilippo translated that prototype to the C language and implemented the first data type, the list. After a few weeks of using the project internally with success, Sanfilippo decided to open source it, announcing the project on Hacker News. The project began to get traction, particularly among the Ruby community, with GitHub and Instagram being among the first companies adopting it.[21][22]\n\nSanfilippo was hired by VMware in March 2010.[23][24][25]\n\nIn May 2013, Redis was sponsored by Pivotal Software (a VMware spin-off).[26]\n\nIn June 2015, development became sponsored by Redis Ltd.[27]\n\nIn August 2018, to control usage of the software by managed cloud providers without adequate compensation, Redis Ltd. announced that it would relicense the optional Redis modules from the GNU Affero General Public License (AGPL) to the Apache License, but subject to an addendum known as the \"Commons Clause\" that restricts commercial usage. This made the modules source-available and no longer free software. The core Redis software remained under a BSD license, with Redis Ltd. committing to maintaining these terms.[19][28][29]\n\nIn October 2018, Redis 5.0 was released, introducing Redis Stream – a new data structure that allows storage of multiple fields and string values with an automatic, time-based sequence at a single key.[30]\n\nIn February 2019, citing confusion over the licensing terms, the Apache License with Commons Clause licensing terms for Redis modules was replaced with the \"Redis Source Available License\" (RSAL), which explicitly prohibits commercial use of the modules as part of \"a database, a caching engine, a stream processing engine, a search engine, an indexing engine or an ML/DL/AI serving engine.\"[31][32] The last revision of the modules under a free and open source license were forked by community members as the GoodFORM project.[33]\n\nIn June 2020, Salvatore Sanfilippo stepped down as Redis' sole maintainer. Sanfilippo was succeeded by Yossi Gottlieb and Oran Agra.[17][34]\n\nIn March 2024, Redis Ltd. announced that beginning with version 7.4, the core Redis software would be relicensed under the RSAL and Server Side Public License (SSPL), both of which are source-available and non-free.[35] The Linux Foundation subsequently announced that it would fork the last BSD-licensed version of Redis as Valkey.[36] In May 2025, Redis Ltd. announced that it would change the license again to the AGPL beginning on version 8.0, citing that forks had achieved their goal of creating a \"level playing field\" of differentiated products, and that Redis has achieved \"record growth\" since the change in license.[7]\n\nRedis popularized the idea of a system that can be considered a store and a cache at the same time. It was designed so that data is always modified and read from the main computer memory, but also stored on disk in a format that is unsuitable for random data access. The formatted data is only reconstructed into memory once the system restarts.\n\nRedis also provides a data model that is very unusual compared to a relational database management system (RDBMS). User commands do not describe a query to be executed by the database engine but rather specific operations that are performed on given abstract data types. Therefore data must be stored in a way which is suitable later for fast retrieval. The retrieval is done without help from the database system in form of secondary indexes, aggregations or other common features of traditional RDBMS. The Redis implementation makes heavy use of the fork system call, to duplicate the process holding the data, so that the parent process continues to serve clients while the child process writes the in-memory data to disk.\n\nAccording to monthly DB-Engines rankings, Redis is often the most popular key–value database.[11] Redis has also been ranked the #4 NoSQL database in user satisfaction and market presence based on user reviews,[37] the most popular NoSQL database in containers,[38] and the #4 Data store of 2019 by ranking website stackshare.io.[39] It was voted most loved database in the Stack Overflow Developer Survey each year from 2017 to 2021.[40] However as of 2024, it has since fallen to sixth place.[41]\n\nRedis maps keys to types of values. Redis supports a number of data types including Strings, JavaScript Object Notation (JSON) documents, Hashes (a collection of fields, each field is a name-value string pair),[42] lists, sets, vector sets,[43] and more.\n\nThe Redis Query Engine allows users to use Redis as a document database, a vector database, a secondary index, and a search engine. With Redis Query Engine, users can define indexes for hash and JSON documents, and use a rich query language for vector search, full-text search, geospatial queries, and aggregations.[44]\n\nRedis Pub/Sub (short for publish/subscribe) is a lightweight messaging capability. Publishers send messages to a channel, and subscribers receive messages from that channel.[45]\n\nA Redis transaction allows the execution of a group of commands in a single step. A request sent by another client will never be served during the execution of a transaction. This guarantees that the commands are executed as a single isolated operation.[46]\n\nRedis users can also upload and execute Lua scripts on the server.[47]\n\nAs of May 1, 2025, for all version of Redis starting with 8.0, all data types are included in the same package[48] and available under the Redis Source Available license v2.[49] Previously some data types were separate and therefore available under difference licenses.\n\nRedis typically holds the whole dataset in memory. Versions up to 2.4 could be configured to use what they refer to as virtual memory[50] in which some of the dataset is stored on disk, but this feature is deprecated. Persistence in Redis can be achieved through two different methods. First by snapshotting, where the dataset is asynchronously transferred from memory to disk at regular intervals as a binary dump, using the Redis RDB Dump File Format. Alternatively by journaling, where a record of each operation that modifies the dataset is added to an append-only file (AOF) in a background process. Redis can rewrite the append-only file in the background to avoid an indefinite growth of the journal. Journaling was introduced in version 1.1 and is generally considered the safer approach.\n\nBy default, Redis writes data to a file system at least every 2 seconds, with more or less robust options available if needed. In the case of a complete system failure on default settings, only a few seconds of data would be lost.\n\nRedis supports master–replica replication. Data from any Redis server can replicate to any number of replicas. A replica may be a master to another replica. This allows Redis to implement a single-rooted replication tree. Redis replicas can be configured to accept writes, permitting intentional and unintentional inconsistency between instances. The publish–subscribe feature is fully implemented, so a client of a replica may subscribe to a channel and receive a full feed of messages published to the master, anywhere up the replication tree. Replication is useful for read (but not write) scalability or data redundancy.[51]\n\nWhen the durability of data is not needed, the in-memory nature of Redis allows it to perform well compared to database systems that write every change to disk before considering a transaction committed.[8] Redis operates as a single process and is single-threaded or double-threaded when it rewrites the AOF (append-only file).[52] Thus, a single Redis instance cannot use parallel execution of tasks such as stored procedures.\n\nRedis introduced clustering in April 2015 with the release of version 3.0.[53] The cluster specification implements a subset of Redis commands: all single-key commands are available, multi-key operations (commands related to unions and intersections) are restricted to keys belonging to the same node, and commands related to database selection operations are unavailable.[54] A Redis cluster can scale up to 1,000 nodes, achieve \"acceptable\" write safety and to continue operations when some nodes fail.[55][56]\n\nTypical use cases of Redis are session caching, full page cache, message queue applications, leaderboards and counting among others.[57] The publish–subscribe messaging paradi...",
  "source_type": "wikipedia_article",
  "domain": "general_knowledge",
  "keywords": [
    "wikipedia",
    "ai",
    "programming",
    "technology",
    "redis"
  ],
  "retrieval_tags": [
    "wikipedia",
    "article",
    "ai",
    "programming",
    "knowledge"
  ]
}