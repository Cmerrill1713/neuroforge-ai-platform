{
  "id": "wikipedia_Git",
  "title": "Git",
  "url": "https://en.wikipedia.org/wiki/Git",
  "content": "Git (/ɡɪt/ ⓘ[8]) is a distributed version control software system[9] that is capable of managing versions of source code or data. It is often used to control source code by programmers who are developing software collaboratively.\n\nDesign goals of Git include speed, data integrity, and support for distributed, non-linear workflows—thousands of parallel branches running on different computers.[10][11][12]\n\nAs with most other distributed version control systems, and unlike most client–server systems, Git maintains a local copy of the entire repository, also known as \"repo\", with history and version-tracking abilities, independent of network access or a central server. A repository is stored on each computer in a standard directory with additional, hidden files to provide version control capabilities.[13] Git provides features to synchronize changes between repositories that share history; for asynchronous collaboration, this extends to repositories on remote machines. Although all repositories (with the same history) are peers, developers often use a central server to host a repository to hold an integrated copy.\n\nGit is free and open-source software shared under the GPL-2.0-only license.\n\nGit was originally created by Linus Torvalds for version control in the development of the Linux kernel.[14] The trademark \"Git\" is registered by the Software Freedom Conservancy.\n\nToday, Git is the de facto standard version control system. It is the most popular distributed version control system,[15][16] with nearly 95% of developers reporting it as their primary version control system as of 2022.[17] It is the most widely used source-code management tool among professional developers. There are offerings of Git repository services, including GitHub, SourceForge, Bitbucket and GitLab.[18][19][20][21][22]\n\nTorvalds started developing Git in April 2005 after the free license for BitKeeper, the proprietary source-control management (SCM) system used for Linux kernel development since 2002, was revoked for Linux.[23][24] The copyright holder of BitKeeper, Larry McVoy, claimed that Andrew Tridgell had created SourcePuller by reverse engineering the BitKeeper protocols.[25] The same incident also spurred the creation of Mercurial, another version-control system.\n\nTorvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs. He cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where synchronizing with fellow maintainers could require 250 such actions at once. For his design criterion, he specified that patching should take no more than three seconds, and added three more goals:[10]\n\nThese criteria eliminated every version-control system in use at the time, so immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own.[12]\n\nThe development of Git began on 3 April 2005.[26] Torvalds announced the project on 6 April and became self-hosting the next day.[26][27] The first merge of multiple branches took place on 18 April.[28] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at a rate of 6.7 patches per second.[29] On 16 June, Git managed the kernel 2.6.12 release.[30]\n\nTorvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[31] Hamano was responsible for the 1.0 release on 21 December 2005.[32]\n\nTorvalds sarcastically quipped about the name git (which is British English slang for an unpleasant or silly person): \"I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'.\"[33][34] The man page describes Git as \"the stupid content tracker\".[35]\n\nThe read-me file of the source code elaborates further:[36]\n\n\"git\" can mean anything, depending on your mood.\n\nThe source code for Git refers to the program as \"the information manager from hell\".[37][38]\n\nGit's design is a synthesis of Torvalds's experience with Linux in maintaining a large distributed development project, along with his intimate knowledge of file-system performance gained from the same project and the urgent need to produce a working system in short order. These influences led to the following implementation choices:[14]\n\nAnother property of Git is that it snapshots directory trees of files. The earliest systems for tracking versions of source code, Source Code Control System (SCCS) and Revision Control System (RCS), worked on individual files and emphasized the space savings to be gained from interleaved deltas (SCCS) or delta encoding (RCS) the (mostly similar) versions. Later revision-control systems maintained this notion of a file having an identity across multiple revisions of a project. However, Torvalds rejected this concept.[54] Consequently, Git does not explicitly record file revision relationships at any level below the source-code tree.\n\nThese implicit revision relationships have some significant consequences:\n\nGit implements several merging strategies; a non-default strategy can be selected at merge time:[60]\n\nWhen there are more than one common ancestors that can be used for a three-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the three-way merge. This has been reported to result in fewer merge conflicts without causing mis-merges by tests done on prior merge commits taken from Linux 2.6 kernel development history. Also, this can detect and handle merges involving renames.\n\n— Linus Torvalds[61]\n\nGit's primitives are not inherently a source-code management system. Torvalds explains:[62]\n\nIn many ways you can just see git as a filesystem—it's content-addressable, and it has a notion of versioning, but I really designed it coming at the problem from the viewpoint of a filesystem person (hey, kernels is what I do), and I actually have absolutely zero interest in creating a traditional SCM system.\n\nFrom this initial design approach, Git has developed the full set of features expected of a traditional SCM,[63] with features mostly being created as needed, then refined and extended over time.\n\nGit has two data structures: a mutable index (also called stage or cache) that caches information about the working directory and the next revision to be committed; and an object database that stores immutable objects.\n\nThe index serves as a connection point between the object database and the working tree.\n\nThe object store contains five types of objects:[64][52]\n\nEach object is identified by a SHA-1 hash of its contents. Git computes the hash and uses this value for the object's name. The object is put into a directory matching the first two characters of its hash. The rest of the hash is used as the file name for that object.\n\nGit stores each revision of a file as a unique blob. The relationships between the blobs can be found through examining the tree and commit objects. Newly added objects are stored in their entirety using zlib compression. This can consume a large amount of disk space quickly, so objects can be combined into packs, which use delta compression to save space, storing blobs as their changes relative to other blobs.\n\nAdditionally, Git stores labels called refs (short for references) to indicate the locations of various commits. They are stored in the reference database and are respectively:[70]\n\nFrequently used commands for Git's command-line interface include:[71][72]\n\nA .gitignore file may be created in a Git repository as a plain text file. The files listed in the .gitignore file will not be tracked by Git.[73]: 3–4  This feature can be used to ignore files with keys or passwords, various extraneous files, and large files (which GitHub will refuse to upload).[74]\n\nEvery object in the Git database that is not referred to may be cleaned up by using a garbage collection command or automatically. An object may be referenced by another object or an explicit reference. Git has different types of references. The commands to create, move, and delete references vary. git show-ref lists all references. Some types are:\n\nGit (the main implementation in C) is primarily developed on Linux, although it also supports most major operating systems, including the BSDs (DragonFly BSD, FreeBSD, NetBSD, and OpenBSD), Solaris, macOS, and Windows.[76][77]\n\nThe first Windows port of Git was primarily a Linux-emulation framework that hosts the Linux version. Installing Git under Windows creates a similarly named Program Files directory containing the Mingw-w64 port of the GNU Compiler Collection, Perl 5, MSYS2 (itself a fork of Cygwin, a Unix-like emulation environment for Windows) and various other Windows ports or emulations of Linux utilities and libraries. Currently, native Windows builds of Git are distributed as 32- and 64-bit installers.[78] The git official website currently maintains a build of Git for Windows, still using the MSYS2 environment.[79]\n\nThe JGit implementation of Git is a pure Java software library, designed to be embedded in any Java application. JGit is used in the Gerrit code-review tool, and in EGit, a Git client for the Eclipse IDE.[80]\n\nGo-git is an open-source implementation of Git written in pure Go.[81] It is currently used for backing projects as a SQL interface for Git code repositories[82] and providing encryption for Git.[83]\n\nDulwich is an implementation of Git written in pure Python with support for CPython 3.6 and later and Pypy.[84]\n\nThe libgit2 implementation of Git is an ANSI C software library with no other dependencies, which can be built on multiple platforms, including Windows, Linux, macOS, and BSD.[85] It has bindings for many programming languages, including Ruby, Python, and Haskell.[86][87][88]\n\nJS-Git is a JavaScript implementation of a subset of Git.[89]\n\nGame of ...",
  "source_type": "wikipedia_article",
  "domain": "general_knowledge",
  "keywords": [
    "wikipedia",
    "ai",
    "programming",
    "technology",
    "git"
  ],
  "retrieval_tags": [
    "wikipedia",
    "article",
    "ai",
    "programming",
    "knowledge"
  ]
}