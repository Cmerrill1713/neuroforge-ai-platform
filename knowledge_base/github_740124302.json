{
  "id": "github_740124302",
  "title": "1brc-electron",
  "description": "One Billion Row Challenge end to end desktop solution built using AI tech",
  "url": "https://github.com/disler/1brc-electron",
  "language": "TypeScript",
  "stars": 12,
  "forks": 2,
  "created_at": "2024-01-07T15:47:35Z",
  "updated_at": "2025-06-19T13:22:07Z",
  "topics": [],
  "readme_content": "# 1 Billion Row Challenge with Electron, DuckDB, Prompts, Cursor and Aider\n> Progressing our Agentic engineering abilities by building a 1 billion row challenge app with Electron, DuckDB, Prompts, Cursor and Aider\n\n![1brc](img/1brc.png)\n\n## Checkout the video where we built this\n- [Youtube](https://youtu.be/E6bcyo32zss)\n\n## Setup\n- `brew install duckdb` (mac see [docs for other platforms](https://duckdb.org/docs/installation/?version=latest&environment=cli&installer=binary&platform=win))\n- `yarn install`\n- `cp .env.sample .env` - Update the .env file with your openai key\n- `yarn run generate <number of rows>` - Generate the data (optional)\n  - *'The git committed `data/measurements.txt` contains 1 million rows you can use without running this command'*\n  - *'I recommend generating 1mil rows'*\n  - *'I wrote the generation script (scripts/createMeasurements.ts) based off the original implementation, to be memory efficient for node, but it still takes a while to generate the data since node is (relatively) hella slow.'*\n  - *'My M2 64gb ram 1 billion rows took ~8 minutes to generate'. Adjust accordingly.*\n- `yarn run agent` - Run turbo4 agent to generate the knowledge base and create the `data/agentOutput/*` files (optional)\n  - `The git commited `data/agentOutput/*` contains the knowledge base you can use without running this command`\n- `duckdb ./data/db.duckdb < ./data/agentOutput/generate-table.sql` - Create the tables based on `data/measurements.txt`\n- `yarn run dev` - Start the app\n\n## Important Files\n- `src/main/turbo4.ts` - OpenAI Assistant Wrapper with Knowledge Base Build/Consume support\n- `src/main/main.ts` - Electron Main Process\n- `src/renderer/App.vue` - Renderer Process (Vue App)\n- `scripts/createMeasurements.ts` - Generate the measurements data\n- `data/agentOutput/*` - Contains files generated by the agents\n- `data/agentOutputBackup/*` - Contains files generated by original 1brc electron app in [youtube AI Devlog](https://youtu.be/E6bcyo32zss)\n  - If you want overwrite `data/agentOutput/*` and want to use the original data, copy the contents of this folder to `data/agentOutput/`\n\n### Resources\n- [1 Billion Row Challenge Original](https://www.morling.dev/blog/one-billion-row-challenge/)\n- [1 Billion Row Challenge DuckDB](https://rmoff.net/2024/01/03/1%EF%B8%8F%E2%83%A3%EF%B8%8F-1brc-in-sql-with-duckdb/)\n- [Aider](https://aider.chat/)\n- [Cursor](https://cursor.sh/)\n- [DuckDB Docs](https://duckdb.org/)\n- [Electron Vite Vue Typescript Starter](https://github.com/Deluze/electron-vue-template)\n- [Vuetify Server Table](https://vuetifyjs.com/en/components/data-tables/server-side-tables/#examples)\n- [Vuetify Pagination](https://vuetifyjs.com/en/components/paginations/#disabled)\n- [Electron](https://www.electronjs.org/)\n- [LLM In CLI](https://github.com/simonw/llm)\n\n## Primary DuckDB Generation Commands\n- Prove our agents did their jobs\n  - `duckdb ./data/db.duckdb < ./data/agentOutput/generate-table.sql`\n  - `duckdb ./data/db.duckdb .tables`\n  - `duckdb ./data/db.duckdb \"from measurements limit 5\"`\n  - `duckdb ./data/db.duckdb \"from brc limit 5\"`\n\n## DuckDB Commands\n- `duckdb` - Start DuckDB Shell\n- In the shell\n  - `.open <database>` - Open a database\n  - `.tables` - List all tables\n  - `.schema <table>` - Show schema of a table\n  - `.quit` - Quit the shell\n  - `.help` - Show help\n- `duckdb <path/to/database.duckdb>` - Start Shell with database\n- `duckdb <path/to/database.duckdb> <sql statement>` - Run SQL statement on database\n- `duckdb <path/to/database.duckdb> <duckdb command>` - Run DuckDb statement on database\n\n## Arch Diagrams\n\n### Tier 1 Detail\n\n```mermaid\nflowchart LR\n\n    subgraph database\n\n    end\n\n    subgraph electron:main\n\n    end\n\n    subgraph electron:renderer\n\n    end\n\n     database <--> electron:main <--> electron:renderer \n```\n\n### Tier 2 Detail\n\n```mermaid\nflowchart LR\n\n    subgraph database\n    subgraph duckdb tables\n        d_a[\"brc: {station, min, max, mean}\"]\n        d_b[\"measurements: {station, measurement}\"]\n    end\n        \n    end\n\n    subgraph electron:main\n        em_a[src/main/turbo4.ts]\n        em_b[scripts/createMeasurements.ts]\n        em_c[src/main/main.ts]\n    end\n\n    subgraph electron:renderer\n        er_a[src/renderer/App.vue]\n    end\n\n     database <--CRUD--> electron:main <--Communication vs Preload.ts--> electron:renderer \n```\n\n### Tier 3 Knowledgeable\n```mermaid\nflowchart LR\n\n    subgraph database\n    subgraph duckdb tables\n        d_a[\"brc: {station, min, max, mean}\"]\n        d_b[\"measurements: {station, measurement}\"]\n    end\n        \n    end\n\n    subgraph electron:main\n        em_a[src/main/turbo4.ts]\n        em_b[scripts/createMeasurements.ts]\n        em_c[src/main/main.ts]\n    end\n\n    subgraph electron:renderer\n        er_a[src/renderer/App.vue]\n    end\n\n    subgraph knowledge_base\n        kb_a[1brc OG Gunnar post]\n        kb_b[1brc DuckDB post]\n        kb_c[DuckDB Documentation]\n    end\n\n     database <--CRUD--> electron:main <--Communication Via Preload.ts--> electron:renderer \n     em_a <--build kb --> knowledge_base\n```",
  "source_type": "github_repository",
  "domain": "software_development",
  "keywords": [
    "ai"
  ],
  "retrieval_tags": [
    "github",
    "repository",
    "code",
    "development"
  ]
}