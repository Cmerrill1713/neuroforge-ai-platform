{
  "id": "wikipedia_Programming_language",
  "title": "Programming language",
  "url": "https://en.wikipedia.org/wiki/Programming_language",
  "content": "A programming language is an artificial language for expressing computer programs.[1]\n\nProgramming languages typically allow software to be written in a human readable manner.\n\nExecution of a program requires an implementation. There are two main approaches for implementing a programming language – compilation, where programs are compiled ahead-of-time to machine code, and interpretation, where programs are directly executed. In addition to these two extremes, some implementations use hybrid approaches such as just-in-time compilation and bytecode interpreters.[2]\n\nThe design of programming languages has been strongly influenced by computer architecture, with most imperative languages designed around the ubiquitous von Neumann architecture.[3][full citation needed] While early programming languages were closely tied to the hardware, modern languages often hide hardware details via abstraction in an effort to enable better software with less effort.[citation needed]\n\nA programming language differs from a natural language in many ways – especially intent. A natural language is intended for communicating between people, while a programming language is intended to allow people to control a computer.[4]\n\nThe term computer language is sometimes used interchangeably with programming language[5] but some contend they are different concepts. Some contend that programming languages are a subset of computer languages.[6] Some use computer language to classify a language used in computing that is not considered a programming language.[citation needed] Some regard a programming language as a theoretical construct for programming an abstract machine, and a computer language as the subset thereof that runs on a physical computer, which has finite hardware resources.[7]\n\nJohn C. Reynolds emphasizes that a formal specification language is as much a programming language as is a language intended for execution. He argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.[8]\n\nThe first programmable computers were invented during the 1940s, and with them, the first programming languages.[9] The earliest computers were programmed in first-generation programming languages (1GLs), machine language (simple instructions that could be directly executed by the processor). This code was very difficult to debug and was not portable between different computer systems.[10] In order to improve the ease of programming, assembly languages (or second-generation programming languages—2GLs) were invented, diverging from the machine language to make programs easier to understand for humans, although they did not increase portability.[11]\n\nInitially, hardware resources were scarce and expensive, while human resources were cheaper. Therefore, cumbersome languages that were time-consuming to use, but were closer to the hardware for higher efficiency were favored.[12] The introduction of high-level programming languages (third-generation programming languages—3GLs)—revolutionized programming. These languages abstracted away the details of the hardware, instead being designed to express algorithms that could be understood more easily by humans. For example, arithmetic expressions could now be written in symbolic notation and later translated into machine code that the hardware could execute.[11] In 1957, Fortran (FORmula TRANslation) was invented. Often considered the first compiled high-level programming language,[11][13] Fortran has remained in use into the twenty-first century.[14]\n\nAround 1960, the first mainframes—general purpose computers—were developed, although they could only be operated by professionals and the cost was extreme. The data and instructions were input by punch cards, meaning that no input could be added while the program was running. The languages developed at this time therefore are designed for minimal interaction.[16] After the invention of the microprocessor, computers in the 1970s became dramatically cheaper.[17] New computers also allowed more user interaction, which was supported by newer programming languages.[18]\n\nLisp, implemented in 1958, was the first functional programming language.[19] Unlike Fortran, it supported recursion and conditional expressions,[20] and it also introduced dynamic memory management on a heap and automatic garbage collection.[21] For the next decades, Lisp dominated artificial intelligence applications.[22] In 1978, another functional language, ML, introduced inferred types and polymorphic parameters.[18][23]\n\nAfter ALGOL (ALGOrithmic Language) was released in 1958 and 1960,[24] it became the standard in computing literature for describing algorithms. Although its commercial success was limited, most popular imperative languages—including C, Pascal, Ada, C++, Java, and C#—are directly or indirectly descended from ALGOL 60.[25][14] Among its innovations adopted by later programming languages included greater portability and the first use of context-free, BNF grammar.[26] Simula, the first language to support object-oriented programming (including subtypes, dynamic dispatch, and inheritance), also descends from ALGOL and achieved commercial success.[27] C, another ALGOL descendant, has sustained popularity into the twenty-first century. C allows access to lower-level machine operations more than other contemporary languages. Its power and efficiency, generated in part with flexible pointer operations, comes at the cost of making it more difficult to write correct code.[18]\n\nProlog, designed in 1972, was the first logic programming language, communicating with a computer using formal logic notation.[28][29] With logic programming, the programmer specifies a desired result and allows the interpreter to decide how to achieve it.[30][29]\n\nDuring the 1980s, the invention of the personal computer transformed the roles for which programming languages were used.[31] New languages introduced in the 1980s included C++, a superset of C that can compile C programs but also supports classes and inheritance.[32] Ada and other new languages introduced support for concurrency.[33] The Japanese government invested heavily into the so-called fifth-generation languages that added support for concurrency to logic programming constructs, but these languages were outperformed by other concurrency-supporting languages.[34][35]\n\nDue to the rapid growth of the Internet and the World Wide Web in the 1990s, new programming languages were introduced to support Web pages and networking.[36] Java, based on C++ and designed for increased portability across systems and security, enjoyed large-scale success because these features are essential for many Internet applications.[37][38] Another development was that of dynamically typed scripting languages—Python, JavaScript, PHP, and Ruby—designed to quickly produce small programs that coordinate existing applications. Due to their integration with HTML, they have also been used for building web pages hosted on servers.[39][40]\n\nDuring the 2000s, there was a slowdown in the development of new programming languages that achieved widespread popularity.[41] One innovation was service-oriented programming, designed to exploit distributed systems whose components are connected by a network. Services are similar to objects in object-oriented programming, but run on a separate process.[42] C# and F# cross-pollinated ideas between imperative and functional programming.[43] After 2010, several new languages—Rust, Go, Swift, Zig and Carbon —competed for the performance-critical software for which C had historically been used.[44] Most of the new programming languages use static typing while a few numbers of new languages use dynamic typing like Ring and Julia.[45][46]\n\nSome of the new programming languages are classified as visual programming languages like Scratch, LabVIEW and PWCT. Also, some of these languages mix between textual and visual programming usage like Ballerina.[47][48][49][50] Also, this trend lead to developing projects that help in developing new VPLs like Blockly by Google.[51] Many game engines like Unreal and Unity added support for visual scripting too.[52][53]\n\nA language can be defined in terms of syntax (form) and semantics (meaning), and often is defined via a formal language specification.\n\nA programming language's surface form is known as its syntax. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, some programming languages are graphical, using visual relationships between symbols to specify a program.\n\nThe syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either formal or hard-coded in a reference implementation). Since most languages are textual, this article discusses textual syntax.\n\nThe programming language syntax is usually defined using a combination of regular expressions (for lexical structure) and Backus–Naur form (for grammatical structure). Below is a simple grammar, based on Lisp:\n\nThis grammar specifies the following:\n\nThe following are examples of well-formed token sequences in this grammar: 12345, () and (a b c232 (1)).\n\nNot all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit undefined behavior. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the...",
  "source_type": "wikipedia_article",
  "domain": "general_knowledge",
  "keywords": [
    "wikipedia",
    "ai",
    "programming",
    "technology",
    "programming language"
  ],
  "retrieval_tags": [
    "wikipedia",
    "article",
    "ai",
    "programming",
    "knowledge"
  ]
}