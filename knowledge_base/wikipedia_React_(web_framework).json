{
  "id": "wikipedia_React_(web_framework)",
  "title": "React (software)",
  "url": "https://en.wikipedia.org/wiki/React_(web_framework)",
  "content": "React (also known as React.js or ReactJS) is a free and open-source front-end JavaScript library[5][6] that aims to make building user interfaces based on components more \"seamless\".[5] It is maintained by Meta (formerly Facebook) and a community of individual developers and companies.[7][8][9]\n\nReact can be used to develop single-page, mobile, or server-rendered applications with frameworks like Next.js and Remix[a]. Because React is only concerned with the user interface and rendering components to the DOM, React applications often rely on libraries for routing and other client-side functionality.[11][12] A key advantage of React is that it only re-renders those parts of the page that have changed, avoiding unnecessary re-rendering of unchanged DOM elements.\n\nReact adheres to the declarative programming paradigm.[13][14]: 76  Developers design views for each state of an application, and React updates and renders components when data changes. This is in contrast with imperative programming.[15]\n\nReact code is made of entities called components.[14]: 10–12  These components are modular and can be reused.[14]: 70  React applications typically consist of many layers of components. The components are rendered to a root element in the DOM using the React DOM library. When rendering a component, values are passed between components through props (short for \"properties\"). Values internal to a component are called its state.[16]\n\nThe two primary ways of declaring components in React are through function components and class components.[14]: 118 [17]: 10  Since React v16.8, using function components is the recommended way.\n\nFunction components, announced at React Conf 2018, and available since React v16.8, are declared with a function that accepts a single \"props\" argument and returns JSX. Function components can use internal state with the useState Hook.\n[18]\n\nOn February 16, 2019, React 16.8 was released to the public, introducing React Hooks.[18] Hooks are functions that let developers \"hook into\" React state and lifecycle features from function components.[19] Notably, Hooks do not work inside classes — they let developers use more features of React without classes.[20]\n\nReact provides several built-in hooks such as useState,[21][17]: 37  useContext,[14]: 11 [22][17]: 12  useReducer,[14]: 92 [22][17]: 65–66  useMemo[14]: 154 [22][17]: 162  and useEffect.[23][17]: 93–95  Others are documented in the Hooks API Reference.[24][14]: 62  useState and useEffect, which are the most commonly used, are for controlling state[14]: 37  and side effects,[14]: 61  respectively.\n\nThere are two rules of hooks[25] which describe the characteristic code patterns that hooks rely on:\n\nAlthough these rules cannot be enforced at runtime, code analysis tools such as linters can be configured to detect many mistakes during development. The rules apply to both usage of Hooks and the implementation of custom Hooks,[26] which may call other Hooks.\n\nReact server components (RSC) [27] are function components that run exclusively on the server.  The concept was first introduced in the talk \"Data Fetching with Server Components\".[28] Though a similar concept to Server Side Rendering, RSCs do not send corresponding JavaScript to the client as no hydration occurs.  As a result, they have no access to hooks. However, they may be asynchronous function, allowing them to directly perform asynchronous operations:\n\nCurrently, server components are most readily usable with Next.js. With Next.js, it's possible to write components for both the server and the client (browser). When a server rendered component is received by the browser, React in the browser takes over and creates the virtual DOM and attach event handlers. This is called hydration.\n[29]\n\nClass components are declared using ES6 classes. They behave the same way that function components do, but instead of using Hooks to manage state and lifecycle events, they use the lifecycle methods on the React.Component base class.\n\nThe introduction of React Hooks with React 16.8 in February 2019 allowed developers to manage state and lifecycle behaviors within functional components, reducing the reliance on class components.\n\nThis trend aligns with the broader industry movement towards functional programming and modular design. As React continues to evolve, it is essential for developers to consider the benefits of functional components and React Hooks when building new applications or refactoring existing ones.[30]\n\nReact itself does not come with built-in support for routing. React is primarily a library for building user interfaces, and it does not include a full-fledged routing solution out of the box. Third-party libraries can be used to handle routing in React applications.[31] It allows the developer to define routes, manage navigation, and handle URL changes in a React-friendly way.\n\nAnother notable feature is the use of a virtual Document Object Model, or Virtual DOM. React creates an in-memory data-structure, similar to the browser DOM. Every time components are rendered, the result is compared with the virtual DOM. It then updates the browser's displayed DOM efficiently with only the computed differences.[32] This process is called reconciliation. This allows the programmer to write code as if the entire page is rendered on each change, while React only renders the components that actually change. This selective rendering provides a major performance boost.[33][34]\n\nWhen ReactDOM.render[35] is called again for the same component and target, React represents the new UI state in the Virtual DOM and determines which parts (if any) of the living DOM needs to change.[36]\n\nLifecycle methods for class-based components use a form of hooking that allows the execution of code at set points during a component's lifetime.\n\nJSX, or JavaScript XML, is an extension to the JavaScript language syntax.[38] Similar in appearance to HTML,[14]: 11  JSX provides a way to structure component rendering using syntax familiar[14]: 15  to many developers. React components are typically written using JSX, although they do not have to be (components may also be written in pure JavaScript). During compilation, JSX is converted to JavaScript code. JSX is similar to another extension syntax created by Facebook for PHP called XHP.\n\nAn example of JSX code:\n\nThe basic architecture of React applies beyond rendering HTML in the browser. For example, Facebook has dynamic charts that render to <canvas> tags,[39] and Netflix and PayPal use universal loading to render identical HTML on both the server and client.[40][41] React can also be used to develop native apps for Android and iOS using React Native.\n\nServer-side rendering (SSR) refers to the process of rendering a client-side JavaScript application on the server, rather than in the browser.[42] This can improve the performance of the application, especially for users on slower connections or devices.[43]\n\nWith SSR, the initial HTML that is sent to the client includes the fully rendered UI of the application.[44] This allows the client's browser to display the UI immediately, rather than having to wait for the JavaScript to download and execute before rendering the UI.[44]\n\nReact supports SSR, which allows developers to render React components on the server and send the resulting HTML to the client.[45] This can be useful for improving the performance of the application, as well as for search engine optimization purposes.[46]\n\nReact does not attempt to provide a complete application library. It is designed specifically for building user interfaces[5] and therefore does not include many of the tools some developers might consider necessary to build an application. This allows the choice of whichever libraries the developer prefers to accomplish tasks such as performing network access or local data storage. Common patterns of usage have emerged as the library matures.\n\nTo support React's concept of unidirectional data flow (which might be contrasted with AngularJS's bidirectional flow), the Flux architecture was developed as an alternative to the popular model–view–controller architecture. Flux features actions which are sent through a central dispatcher to a store, and changes to the store are propagated back to the view.[47] When used with React, this propagation is accomplished through component properties. Since its conception, Flux has been superseded by libraries such as Redux and MobX.[48]\n\nFlux can be considered a variant of the observer pattern.[49]\n\nA React component under the Flux architecture should not directly modify any props passed to it, but should be passed callback functions that create actions which are sent by the dispatcher to modify the store. The action is an object whose responsibility is to describe what has taken place: for example, an action describing one user \"following\" another might contain a user id, a target user id, and the type USER_FOLLOWED_ANOTHER_USER.[50] The stores, which can be thought of as models, can alter themselves in response to actions received from the dispatcher.\n\nThis pattern is sometimes expressed as \"properties flow down, actions flow up\". Many implementations of Flux have been created since its inception, perhaps the most well-known being Redux, which features a single store, often called a single source of truth.[51]\n\nIn February 2019, useReducer was introduced as a React hook in the 16.8 release. It provides an API that is consistent with Redux, enabling developers to create Redux-like stores that are local to component states.[52]\n\nReact was created by Jordan Walke, a software engineer at Meta, who initially developed a prototype called \"F-Bolt\"[53] before later renaming it to \"FaxJS\". This early version is documented in Jordan Walke's GitHub repository.[1] Influences for the project included XHP, an HTML component library for PHP.\n\nReact was first deployed on Facebook's News Feed in 2011 and subsequently integrated into In...",
  "source_type": "wikipedia_article",
  "domain": "general_knowledge",
  "keywords": [
    "wikipedia",
    "ai",
    "programming",
    "technology",
    "react (web framework)"
  ],
  "retrieval_tags": [
    "wikipedia",
    "article",
    "ai",
    "programming",
    "knowledge"
  ]
}